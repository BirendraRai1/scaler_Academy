Q>Longest Substring Without Repeating Characters
sol>let lengthOfLongestSubstring = function(s) {
    let n = s.length
    let ans = 0
    let l=1
    let r=n
    while(l<=r){
        let mid = parseInt((l+r)/2)
        if(checkUnique(s,mid)){
            ans = mid
            l= mid+1
        }
        else{
            r=mid-1
        }
    }
  return ans
};

function checkUnique(s,mid){
    let n = s.length,
        i=0,
        j=0,
        count = new Array(256).fill(0)
        distinctChar = 0
    //counting distinctChar in first window
    while(j<mid){
        count[s.charCodeAt(j)]++
        if(count[s.charCodeAt(j)]==1)
            distinctChar++
        j++
    }
    if(distinctChar==mid)
        return true
        i=1
        j=mid
    while(i<=n-mid && j<n){
        count[s.charCodeAt(i-1)]--//deleting the count of character going out of window
        if(count[s.charCodeAt(i-1)]==0)
            distinctChar--
        count[s.charCodeAt(j)]++//adding the count of character coming inside the window
        if(count[s.charCodeAt(j)]==1)
            distinctChar++
        if(distinctChar==mid)
            return true
        i++
        j++
    }
    return false
}


q>Sort the data in ascending order of count of factors. If count of factors are equal then sort on the basis of magnitude.
sol>function countFactors(x){
	let count = 0
	for(let i=1;i<=x;i++){
  	if(x%i==0)
    	count++
  }
  return count
}

function sortInAscendingOrder(arr){
	let arr1 = []
  for(let i=0;i<arr.length;i++){
  	arr1.push([countFactors(arr[i]),arr[i]])
  }
  arr1.sort((a,b)=>{
    if(a[0]<b[0])
  	   return a[0]-b[0]
    else if(a[0]==b[0]){
    	return a[1]-b[1]
    }
  })
  let arr2 = []
  for(let i=0;i<arr1.length;i++)
  	arr2.push(arr1[i][1])
  return arr2
  
}
console.log(sortInAscendingOrder([9,3,10,6,4]))

q>String s.Toggle the case of each character
//point to remember strings are immutable in javascript
sol>let str = "AzBs"
let str2=""
for(let i=0;i<str.length;i++){
  if(str[i]>='A' && str[i]<='Z')
    str2+=String.fromCharCode(32+str[i].charCodeAt(0))
  else
   str2+=String.fromCharCode(str[i].charCodeAt(0)-32)
  // console.log("str[i] is",str[i])
}
console.log(str2) 

q>Perfect Sum Problem (Print all subsets with given sum)

function printSubSets(arr,target){
	let result = []
  print(arr,0,target,0,result,[])
  return result
}

function print(arr,sum,target,i,result,newArr){
	if(i==arr.length){
        console.log('sum is',sum)
  	if(sum ==target)
    	return result.push(newArr)
    return
  }
  sum +=arr[i]
  newArr.push(arr[i])
  print(arr,sum,target,i+1,result,[...newArr])
  sum -=arr[i]
  newArr.pop()
  print(arr,sum,target,i+1,result,[...newArr])
}

console.log(printSubSets([2,3,5,6,8,10],10))

q>print all n digits numbers which can be formed with options
function printDigits(i,arr,curr,result,n){
    if(i==n){
      return result.push(curr)
    }
    for(let j=0;j<arr.length;j++){
			curr[i] = arr[j]
      printDigits(i+1,arr,[...curr],result,n)
    }
  } 
let result = []
rintDigits(0,[2,3,7,9],[],result,3)
console.log(result)