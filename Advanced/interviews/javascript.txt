//Harshit Chpora
What is event delegation, and how does it function in JavaScript?
Can you provide an illustration of how ES6 has altered the approach to working with "this" in JavaScript?
Explain the concept of prototypal inheritance?
Differentiate between a variable that is null, undefined, or undeclared?
Define what a closure is and describe its uses and advantages?
Explain the primary distinction between the Array.forEach() loop and Array.map() method, as well as when to choose one over the other.(see polyfills also)?
What is a common scenario for employing anonymous functions?
Distinguish between host objects and native objects?
Clarify the distinctions among 'function User(){}', 'var user = User()', and 'var user = new User()?
Can you explain the purposes of Function.call and Function.apply, along with their notable differences?
Describe the Function.prototype.bind method?
Explain the differences between feature detection, feature inference, and utilizing the User Agent (UA) string?
Define the concept of "hoisting."?
What is type coercion, and what are some common pitfalls associated with relying on it in JavaScript code?
Describe event bubbling and event capturing.?
What distinguishes an "attribute" from a "property"?
List the advantages and disadvantages of extending built-in JavaScript objects?
Explain the differences between == and ===.
Discuss the same-origin policy's implications for JavaScript?
Why is it referred to as a "Ternary operator," and what does the term "Ternary" signify?
Define strict mode and outline some of its advantages and disadvantages.
Analyze the pros and cons of writing JavaScript code in a language that compiles to JavaScript.
What tools and techniques do you employ for debugging JavaScript code?
Enumerate the benefits and drawbacks of immutability and explain how you can achieve it in your code.
Differentiate between synchronous and asynchronous functions and elucidate the event loop?
Explain the disparities between variables created using let, var, or const?
Compare ES6 classes and ES5 function constructors, and furnish a use case for the arrow (=>) function syntax?
Describe the advantages of using the arrow syntax for methods in constructors?
Define a higher-order function and provide an example of object or array destructuring.?
Give an example of generating a string using ES6 Template Literals and explain their benefits.?
Provide an example of a curry function and clarify why this syntax can be advantageous.?
Discuss the benefits of using spread syntax and differentiate it from rest syntax.?
Explain debounce vs throttling.?
Define what a promise is and describe its applications.?
Explore how Object-Oriented Programming (OOP) principles can be applied when coding in JavaScript.


//Arun M
Implement a function that serializes a Javascript value into a JSON string—(asked in Meta)
Implement a function that performs a deep copy of a value, but also handles circular references—(asked in Adobe, Tekion, Navi)
Implement a function that determines if two values are deep equal—(asked in Google, Tekion)
Implement the functionality behaviour of Promise.any—(asked in Zepto)
Implement the functionality behaviour of Promise.allSettled—(asked in Tekion, Adobe)
Implement a function that returns a memoized version of a function which accepts a single argument—(asked in Meta, Intuit, Gameskraft)
Implement a function that deserializes a JSON string into a Javascript value—(asked in Meta)
Implement a class that can subscribe to and emit events that trigger attached callback functions—(asked in Flipkart, Jio, Adobe, Meta, Tekion)
Implement a debounce function that comes with a cancel method to cancel delayed invocations—(asked in Flipkart, MakeMyTrip, Google...)
Implement a function that recursively flattens an array into a single level deep—(asked in Disney+Hotstar, Rippling)
Implement a promisify function that allows the original function to override the return value—(asked in Amazon)
Implement a function to execute N async tasks in series—(asked in Jio, MakeMyTrip, Tekion)
Implement a function to execute N async tasks in parallel—(asked in Zepto, Paytm, BookMyShow)
Implement a function to execute N async tasks in race.
Implement a pipe function which chains N number of functions—(asked in Adobe)
Implement negative indexing in Array using Proxies.
Implement Lodash _.get method which gets value from the path—(asked in TikTok, Amazon, Quizzizz, MindTickle)
Implement your custom version of the call method which sets the "this" context—(asked in Meesho)
Implement throttling of promises which throttles API requests to max limit.
Implement memoizing or caching identical API requests—(asked in Facebook)


Go through my "One Stop Javascript Interview" book 🚀 where I solved & explained all of these (50+) “solved & asked” questions in great-depth :
https://lnkd.in/gdMFzk-n


//Chirag Goel
1>const bfObject = {
value: 42,
gfFunction: function() {
let value1=23
setTimeout(function() { console.log("Result: ", this.value,"value1",value1); }, 1000);
},
}

bfObject.gfFunction();

2>const bf1Object = { 
 value: "BF1", 
 gfFunction: () => { 
 console.log("Result: ", this.value)
 }, 
 } 

const bf2Object = {
 value: "BF2"
}

const gfFunctionRef = bf1Object.gfFunction.bind(bf2Object);
gfFunctionRef();
video link https://www.youtube.com/watch?v=hwoU8NCICSE


3>Guess the output. 3>2>1 === true; 


4>const display = ()=>{
  try{
  return "hello"
  } catch(error){
  return "error"
  }finally{
  return "world"
  }
}

console.log(display())
the above code produces output as world.This is because in javascript whenever we add a finally block to try/catch it will
always be executed even if there is an error or a return statement in the try or catch block

and as there is no error happened in the try block catch block will not be executed but finally block will be executed and will
be produce the output as world. So return statement of finally block will override the return statement of try block

5>console.log(1)
setTimeout(()=>console.log(2))
Promise.resolve().then(()=>console.log(3))
Promise.resolve().then(()=>setTimeout(()=>console.log(4)))
Promise.resolve().then(()=>console.log(5))
setTimeout(()=>console.log(6))
console.log(7)

output:-1735264

