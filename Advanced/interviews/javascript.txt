//Harshit Chpora
What is event delegation, and how does it function in JavaScript?
Can you provide an illustration of how ES6 has altered the approach to working with "this" in JavaScript?
Explain the concept of prototypal inheritance?
Differentiate between a variable that is null, undefined, or undeclared?
Define what a closure is and describe its uses and advantages?
Explain the primary distinction between the Array.forEach() loop and Array.map() method, as well as when to choose one over the other.(see polyfills also)?
What is a common scenario for employing anonymous functions?
Distinguish between host objects and native objects?
Clarify the distinctions among 'function User(){}', 'var user = User()', and 'var user = new User()?
Can you explain the purposes of Function.call and Function.apply, along with their notable differences?
Describe the Function.prototype.bind method?
Explain the differences between feature detection, feature inference, and utilizing the User Agent (UA) string?
Define the concept of "hoisting."?
What is type coercion, and what are some common pitfalls associated with relying on it in JavaScript code?
Describe event bubbling and event capturing.?
What distinguishes an "attribute" from a "property"?
List the advantages and disadvantages of extending built-in JavaScript objects?
Explain the differences between == and ===.
Discuss the same-origin policy's implications for JavaScript?
Why is it referred to as a "Ternary operator," and what does the term "Ternary" signify?
Define strict mode and outline some of its advantages and disadvantages.
Analyze the pros and cons of writing JavaScript code in a language that compiles to JavaScript.
What tools and techniques do you employ for debugging JavaScript code?
Enumerate the benefits and drawbacks of immutability and explain how you can achieve it in your code.
Differentiate between synchronous and asynchronous functions and elucidate the event loop?
Explain the disparities between variables created using let, var, or const?
Compare ES6 classes and ES5 function constructors, and furnish a use case for the arrow (=>) function syntax?
Describe the advantages of using the arrow syntax for methods in constructors?
Define a higher-order function and provide an example of object or array destructuring.?
Give an example of generating a string using ES6 Template Literals and explain their benefits.?
Provide an example of a curry function and clarify why this syntax can be advantageous.?
Discuss the benefits of using spread syntax and differentiate it from rest syntax.?
Explain debounce vs throttling.?
Define what a promise is and describe its applications.?
Explore how Object-Oriented Programming (OOP) principles can be applied when coding in JavaScript.


//Harshit Chopra React Machine coding questions
1. Implement a Todo List: Create a simple todo list application where users can add, edit, and delete tasks.

2. Build a Weather App: Develop a weather application that fetches weather data from an API and displays it to the user.

3. Create a Pagination Component: Design a pagination component that handles navigation between pages of data.

4. Implement a Login Form: Build a login form with validation for email and password fields.

5. Build a Countdown Timer: Develop a countdown timer component that starts from a specified time and decrements until it reaches zero.

6. Create a Modal Component: Design a modal component that can be toggled open and closed.

7. Implement Drag and Drop: Develop a feature that allows users to drag and drop items within a list.

8. Build a Chat Application: Develop a real-time chat application using WebSockets or a library like Socket.io.

9. Create a Dropdown Component: Design a dropdown component with options that can be selected by the user.

10. Implement Form Validation: Develop a form with validation for various fields such as email, password, and phone number.

11. Build a Carousel Component: Design a carousel component that displays a slideshow of images or content.

12. Create a Responsive Layout: Develop a responsive layout that adjusts based on the screen size and orientation.

13. Implement Redux Store: Set up a Redux store and integrate it with a React application to manage state.

14. Build an Infinite Scroll Component: Develop a component that loads more data as the user scrolls down the page.

15. Create a Quiz Application: Develop a quiz application where users can answer multiple-choice questions and see their score at the end.



//Harshit Chopra DSA questions

𝗔𝗿𝗿𝗮𝘆𝘀 𝗮𝗻𝗱 𝗦𝘁𝗿𝗶𝗻𝗴𝘀:
1. Find the missing number in an array of integers.
2. Implement an algorithm to rotate an array.
3. Check if a string is a palindrome.
4. Find the first non-repeating character in a string.
5. Implement an algorithm to reverse a linked list.
6. Merge two sorted arrays.
7. Implement a stack using arrays/linked list.
8. Write a program to remove duplicates from a sorted array.

𝗟𝗶𝗻𝗸𝗲𝗱 𝗟𝗶𝘀𝘁𝘀:
1. Detect a cycle in a linked list.
2. Find the intersection point of two linked lists.
3. Reverse a linked list in groups of k.
4. Implement a function to add two numbers represented by linked lists.
5. Clone a linked list with next and random pointer.

𝗧𝗿𝗲𝗲𝘀 𝗮𝗻𝗱 𝗕𝗶𝗻𝗮𝗿𝘆 𝗦𝗲𝗮𝗿𝗰𝗵 𝗧𝗿𝗲𝗲𝘀 (𝗕𝗦𝗧):
1. Find the height of a binary tree.
2. Check if a binary tree is balanced.
3. Find the lowest common ancestor in a binary tree.
4. Serialize and deserialize a binary tree.
5. Implement an algorithm for in-order traversal without recursion.
6. Convert a BST to a sorted doubly linked list.

𝗦𝗲𝗮𝗿𝗰𝗵𝗶𝗻𝗴 𝗮𝗻𝗱 𝗦𝗼𝗿𝘁𝗶𝗻𝗴:
1. Implement binary search.
2. Find the kth smallest/largest element in an array.
3. Implement quicksort.
4. Count the number of inversions in an array.
5. Search in a rotated sorted array.
Implement a sorting algorithm for linked lists.

𝗗𝘆𝗻𝗮𝗺𝗶𝗰 𝗣𝗿𝗼𝗴𝗿𝗮𝗺𝗺𝗶𝗻𝗴:
1. Find the longest common subsequence.
2. Calculate the nth Fibonacci number using dynamic programming.
3. Coin change problem.
4. Longest increasing subsequence.
5. Knapsack problem.

𝗚𝗿𝗮𝗽𝗵𝘀 𝗮𝗻𝗱 𝗗𝗙𝗦/𝗕𝗙𝗦:
1. Implement depth-first search (DFS) and breadth-first search (BFS).
2. Check if a graph is cyclic.
3. Shortest path in a weighted graph (Dijkstra's or Bellman-Ford).
4. Topological sort of a directed acyclic graph (DAG).
5. Count the number of connected components in an undirected graph.

𝗠𝗶𝘀𝗰𝗲𝗹𝗹𝗮𝗻𝗲𝗼𝘂𝘀:
1. Implement a LRU (Least Recently Used) cache.
2. Find the median of two sorted arrays.
3. Implement a stack that supports push, pop, top, and retrieving the minimum 4. element in constant time.
5. Design a data structure that supports insert, delete, getRandom() operations in constant time.
6. Check if a Sudoku is valid.

//Arun M
Implement a function that serializes a Javascript value into a JSON string—(asked in Meta)
Implement a function that performs a deep copy of a value, but also handles circular references—(asked in Adobe, Tekion, Navi)
Implement a function that determines if two values are deep equal—(asked in Google, Tekion)
Implement the functionality behaviour of Promise.any—(asked in Zepto)
Implement the functionality behaviour of Promise.allSettled—(asked in Tekion, Adobe)
Implement a function that returns a memoized version of a function which accepts a single argument—(asked in Meta, Intuit, Gameskraft)
Implement a function that deserializes a JSON string into a Javascript value—(asked in Meta)
Implement a class that can subscribe to and emit events that trigger attached callback functions—(asked in Flipkart, Jio, Adobe, Meta, Tekion)
Implement a debounce function that comes with a cancel method to cancel delayed invocations—(asked in Flipkart, MakeMyTrip, Google...)
Implement a function that recursively flattens an array into a single level deep—(asked in Disney+Hotstar, Rippling)
Implement a promisify function that allows the original function to override the return value—(asked in Amazon)
Implement a function to execute N async tasks in series—(asked in Jio, MakeMyTrip, Tekion)
Implement a function to execute N async tasks in parallel—(asked in Zepto, Paytm, BookMyShow)
Implement a function to execute N async tasks in race.
Implement a pipe function which chains N number of functions—(asked in Adobe)
Implement negative indexing in Array using Proxies.
Implement Lodash _.get method which gets value from the path—(asked in TikTok, Amazon, Quizzizz, MindTickle)
Implement your custom version of the call method which sets the "this" context—(asked in Meesho)
Implement throttling of promises which throttles API requests to max limit.
Implement memoizing or caching identical API requests—(asked in Facebook)


Go through my "One Stop Javascript Interview" book 🚀 where I solved & explained all of these (50+) “solved & asked” questions in great-depth :
https://lnkd.in/gdMFzk-n


//Chirag Goel
1>const bfObject = {
value: 42,
gfFunction: function() {
let value1=23
setTimeout(function() { console.log("Result: ", this.value,"value1",value1); }, 1000);
},
}

bfObject.gfFunction();

2>const bf1Object = { 
 value: "BF1", 
 gfFunction: () => { 
 console.log("Result: ", this.value)
 }, 
 } 

const bf2Object = {
 value: "BF2"
}

const gfFunctionRef = bf1Object.gfFunction.bind(bf2Object);
gfFunctionRef();

3>const bf1Object = { 
 value: "BF1", 
 gfFunction: function(){ 
 console.log("Result: ", this.value)
 }, 
 } 

const bf2Object = {
 value: "BF2"
}

const gfFunctionRef = bf1Object.gfFunction.bind(bf2Object);
gfFunctionRef(); 

4>const bf1Object = { 
    value: "BF1", 
      gfFunction: function(){ 
      function function1(){
      console.log("Result: ", this.value)
    }
    function1()
  },
} 

const bf2Object = {
 value: "BF2"
}

const gfFunctionRef = bf1Object.gfFunction.bind(bf2Object);
gfFunctionRef();
video link https://www.youtube.com/watch?v=hwoU8NCICSE


3>Guess the output. 3>2>1 === true; 


4>const display = ()=>{
  try{
  return "hello"
  } catch(error){
  return "error"
  }finally{
  return "world"
  }
}

console.log(display())
the above code produces output as world.This is because in javascript whenever we add a finally block to try/catch it will
always be executed even if there is an error or a return statement in the try or catch block

and as there is no error happened in the try block catch block will not be executed but finally block will be executed and will
be produce the output as world. So return statement of finally block will override the return statement of try block

5>console.log(1)
setTimeout(()=>console.log(2))
Promise.resolve().then(()=>console.log(3))
Promise.resolve().then(()=>setTimeout(()=>console.log(4)))
Promise.resolve().then(()=>console.log(5))
setTimeout(()=>console.log(6))
console.log(7)

output:-1735264


6>let obj = {
    greetingMessage:"Welcome to Scaler Academy",
    funOne(){
        console.log(this);
    },
    funTwo:()=>{
        console.log(this);
    }
}

obj.funOne();
let fun = obj.funOne;
fun();
obj.funTwo();
let a = obj.funTwo
a();

output:-obj globalobj {} {}

